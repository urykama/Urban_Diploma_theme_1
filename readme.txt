Цель проекта:
Целью данного проекта является формирование у студентов навыков и компетенций в разработке программного обеспечения, а также развитие их способностей к анализу, проектированию и практическому применению методов разработки.
Задачи проекта:
1. Анализ современных подходов и инструментов в области разработки.

2. Выбор конкретной темы исследования для дальнейшего изучения.

3. Проведение теоретического обзора и анализа литературы по выбранной теме.

4. Оценка результатов и формулирование выводов по проведенному исследованию.

5. Написание и оформление дипломной работы согласно требованиям учебного заведения.
Ожидаемые результаты:
Успешное завершение данного проекта предполагает:

- Глубокое понимание принципов и методов разработки программного обеспечения.

- Навыки анализа и критического мышления в области выбранной темы исследования.

- Выбор наиболее уместных, разработку новых или улучшение существующих подходов к разработке.

- Готовность представить и защитить результаты исследования в виде дипломной работы перед экспертной комиссией.

- Критерии выполнения работы: глубокое понимание изученной темы, способность ответить на вопросы по теме дипломной работы преподавателю, составление плана дипломной работы, объем примерно 15-20 страниц без картинок или 20-30 страниц с учетом картинок.

Мы верим в вашу способность к творческому мышлению и активной работе над проектом. Желаем вам удачи и успешного выполнения поставленных задач!


Дипломная работа по теме: Анализ и сравнение написания web-приложений с использованием разных фреймворков: Разработать простые веб-приложения с использованием Django, Flask и FastAPI, провести их сравнение.
Автор: Камалетдинов Урал Аданисович

Оглавление дипломной работы:

Contents

1. Введение. 6

Обоснование выбора темы: 6

Определение цели и задач исследования: 6

2. Основные понятия и определения. 8

3. Методы и подходы к разработке. 10

Выбор и интеграция предобученной модели. 10

Архитектура веб-приложения. 10

Обеспечение безопасности. 10

4. Обзор популярных инструментов для разработки разработки веб-приложений на Python 10

Django. 10

Flask. 11

FastAPI 11

5. Проектирование приложения. 12

Планирование и анализ требований. 12

Основные требования. 12

Технические требования. 12

6. Разработка в соответствии с созданной документацией. 13

Планирование разработки. 13

Разработка. 13

7. Анализ и интерпретация результатов. 13

Сравнение моделей. 13

Интерпретация результатов. 14

Рекомендации по выбору модели в зависимости от проекта. 14

8. Заключение. 14

Обзор выполненной работы.. 14

Дальнейшие планы.. 14

1. Введение

Обоснование выбора темы: 


Каждый фреймворк предлагает разные подходы к веб-разработке.
Django — это высокоуровневый фреймворк с большим количеством возможностей.
Flask — это минималистичный фреймворк, который позволяет выбирать необходимые компоненты.
FastAPI — это фреймворк, делающий упор на скорость и поддержку асинхронного программирования.
Выбор фреймворка зависит от множества факторов. Это размер проекта, специфические требования к функционалу, уровень знаний команды и предпочтения разработчика.
Сравнение фреймворков может помочь сделать осознанный выбор, который удовлетворит потребности проекта и ускорит процесс разработки.

1. В современном мире искусственный интеллект и глубокое обучение становятся неотъемлемой частью различных областей, включая обработку изображений. Классификация объектов на изображениях представляет собой одну из задач, решаемых с помощью машинного обучения. Веб-приложение, использующее предобученную модель для классификации объектов на изображениях, имеет широкий спектр применений в различных отраслях.

2. Потребности рынка: существует растущая потребность в специалистах, обладающих навыками применения и сравнения различных предобученных моделей машинного обучения для решения задач распознавания объектов на изображениях. Компании стремятся использовать наиболее эффективные модели для улучшения качества своих продуктов и услуг.

3. Практическая значимость: Работа в области разработки веб приложения позволит применить полученные знания на практике иё даст опыт использования предобученных моделей. Это позволит создавать интересные и полезные для пользователей возможности.

4. Личный интерес и потенциальные перспективы: Использование различных инструментов и создание продуктов сочетающих в себе разные технологии (например, для создания веб-приложения) позволяет развить и отработать опыт создания интересных и разносторонних проектов. Кроме того, такие навыки востребованы на рынке труда, что открывает перспективы для карьерного роста и развития.

Таким образом, выбор темы "Анализ и сравнение написания web-приложений с использованием разных фреймворков: Разработать простые веб-приложения с использованием Django, Flask и FastAPI, провести их сравнение." обусловлен ее актуальностью, потребностями рынка, практической значимостью и личным интересом, что делает эту тему подходящей для проведения дипломной работы.

Определение цели и задач исследования:

Цель исследования: Создать платформу для сравнения различных моделей распознавания объектов, чтобы оценить их эффективность.

Задачи исследования:

1. Обзор фреймворков для написания веб приложений и предобученных моделей, применяющихся для распознавания объектов: Провести анализ существующих инструментов, выбрать наиболее подходящие под имеющуюся задачу.

2. Разработка сценариев сравнения: Разработать алгоритм сравнения эффективности моделей, определить критерии сравнения и набрать минимальный набор данных для первичной проверки.

3. Создание платформы и проведение тестирования: реализовать платформу в формате веб-приложения, на можно будет оценить эффективность различных моделей, и провести их тестирование.

4. Написание дипломной работы: Составить дипломную работу, включающую в себя введение, обзор литературы, методологию и результаты исследования, анализ результатов, выводы и рекомендации.

Цели и задачи исследования направлены на получение практических результатов, которые позволят сформировать рейтинг предобученных моделей для классификации объектов.



2. Основные понятия и определения

Обзор основных понятий в области тестирования эффективности предобученных моделей распознавания объектов:

1. Фреймворк (Framework): Программная платформа, которая предоставляет готовые компоненты и инструменты для разработки приложений. В контексте веб-приложений часто используются Django, FastAPI или Flask.

2. Предобученная модель (Pre-trained Model): Модель машинного обучения, которая была заранее обучена на большом наборе данных и может быть использована для решения задач распознавания объектов. Примеры таких моделей включают Inception, ResNet, VGG, и YOLO.

3. Веб-приложение (Web Application): Программное приложение, которое работает на веб-сервере и доступно через браузер. В контексте данного проекта, веб-приложение будет использоваться для сравнения и демонстрации эффективности различных предобученных моделей распознавания объектов.

4. Эффективность модели (Model Efficiency): Оценка того, насколько точно и быстро модель распознает объекты. Основные метрики для оценки эффективности включают достоверность (accuracy), полноту (recall), точность (precision), и время отклика (response time).

5. Достоверность (Accuracy): Процент правильно классифицированных объектов от общего числа объектов. Высокая точность указывает на то, что модель делает меньше ошибок.

6. Полнота (Recall): Способность модели обнаруживать все истинные положительные примеры среди всех положительных примеров в данных. Высокая полнота означает, что модель пропускает меньше истинных положительных объектов.

7. Точность (Precision): Способность модели правильно определять положительные примеры среди всех примеров, которые она классифицировала как положительные. Высокая точность означает, что модель делает меньше ложных срабатываний.

8. Время отклика (Response Time): Время, необходимое модели для обработки входных данных и выдачи результата. Время отклика является важной метрикой, особенно в приложениях, где скорость критична.

9. Матрица ошибок (Confusion Matrix): Таблица, используемая для оценки производительности модели классификации. Она показывает количество правильных и неправильных предсказаний, разбитых по каждой категории.

10. ROC-кривая (Receiver Operating Characteristic Curve): График, который показывает соотношение между полнотой и ложноположительными срабатываниями для модели при различных порогах классификации. ROC-кривая помогает визуально оценить способность модели различать положительные и отрицательные классы.

11. F1-score: Среднее гармоническое значение точности и полноты, которое используется как единая метрика для оценки эффективности модели, особенно когда имеется несбалансированный набор данных.

12. IoU (Intersection over Union): Метрика, используемая для оценки качества сегментации объектов, которая измеряет степень совпадения между предсказанными и истинными границами объектов.

Данные термины помогают понять ключевые аспекты проверки эффективности предобученных моделей для распознавания объектов в веб приложении.



3. Методы и подходы к разработке

Выбор и интеграция предобученной модели

Выбор модели: Начнем с анализа задач, которые наше веб-приложение должно решать, и выберем подходящую предобученную модель машинного обучения. Например, для задач распознавания объектов можно использовать такие модели, как YOLO, ResNet, VGG или Inception.

Интеграция модели: После выбора модели, необходимо интегрировать её в веб-приложение. Это может включать в себя загрузку модели, настройку её параметров и подключение к фреймворку для выполнения анализа.

Архитектура веб-приложения

Frontend и Backend: фронтенд (интерфейс пользователя) и бэкенд (серверная логика). Фронтенд может быть разработан с использованием HTML, CSS и JavaScript, а бэкенд может быть реализован на Python с использованием фреймворков, таких как Flask или Django.

REST API: Для связи между фронтендом и бэкендом можно использовать REST API. Это позволит фронтенду отправлять изображения или другие данные на сервер для обработки моделью и получать результаты.

Обеспечение безопасности

Аутентификация и авторизация: Можно настроить авторизацию пользователей, чтобы например у каждого был доступ к своей статистике проверок моделей.



4. Обзор популярных инструментов для разработки разработки веб-приложений на Python

Основные – Django, Flask, FastAPI, ниже более подробное описание.

Django

Django —фреймворк для веб-разработки на Python.

Основные возможности:

· Встроенная страница администрирования для управления данными.

· ORM (Object-Relational Mapping) для работы с базами данных.

· Поддержка аутентификации пользователей и управления доступом.

· Мощная система маршрутизации URL.

· Шаблонизатор для создания HTML-шаблонов.

Особенности:

Идеально подходит для больших и сложных проектов благодаря своей полной экосистеме.

Flask

Это фреймворк для веб-разработки на Python. Обеспечивает простоту и гибкость.

Основные возможности:

Минималистичный подход: только основные компоненты без лишних зависимостей.

Высокая гибкость для добавления нужных библиотек и модулей.

Jinja2 для шаблонов и Werkzeug для маршрутизации и обработки запросов.

Особенности:

Подходит для небольших и средних проектов, где требуется большая гибкость.

FastAPI

Это современный, высокопроизводительный фреймворк для создания API с Python 3.7+ на основе стандартов OpenAPI и JSON Schema.

Основные возможности:

· Высокая производительность благодаря использованию асинхронного программирования (async/await).

· Автоматическая генерация интерактивной документации API.

· Поддержка валидирования и аннотаций типов данных.

· Интеграция с различными библиотеками и инструментами, такими как Pydantic и SQLAlchemy.

Особенности:

Часто используется для создания API и микросервисов.



5. Проектирование приложения

Планирование и анализ требований

Выбор фреймворка и инструментов: Определение наиболее подходящего фреймворка (например, Django, Flask или FastAPI) и инструментов для разработки.

Определение структуры приложения: Разработка схемы архитектуры, включающей фронтенд, бэкенд, базу данных и интеграцию с предобученной моделью.

Разработка прототипа

Реализация основного функционала: Создание базовой версии приложения с минимально необходимым функционалом для тестирования и демонстрации.

Разработка ключевого функционала

Интеграция предобученной модели: Подключение и настройка выбранной модели машинного обучения для распознавания объектов.

Создание API для взаимодействия с фронтендом: Разработка REST API для обработки запросов от пользовательского интерфейса.

Реализация пользовательского интерфейса: Создание форм и страниц для загрузки изображений, отображения результатов и взаимодействия с пользователем.

Основные требования

Загрузка изображений: Пользователь должен иметь возможность загружать изображения для анализа.

Распознавание объектов: Приложение должно использовать предобученную модель для распознавания объектов на загруженных изображениях.

Отображение результатов: Приложение должно отображать результаты распознавания объектов, включая метки и вероятность для каждого объекта.

Технические требования

Фронтенд: использовать HTML, CSS, JavaScript, возможно Bootstrap

Бэкенд: Python с использованием фреймворков Django.

База данных: Использование базы данных (например, PostgreSQL) для хранения данных о пользователях и истории загрузок.

API: Разработка API для взаимодействия между фронтендом и бэкендом.

Интеграция с моделью машинного обучения: Подключение предобученной модели для обработки изображений и выдачи результатов.

6. Разработка в соответствии с созданной документацией

Планирование разработки

Разработка была разделена на несколько основных этапов: проектирование интерфейса, реализация серверной логики и интеграция модели машинного обучения. Планирование задач и отслеживание прогресса осуществлялось в программе Obsidian.

Разработка

Фронтенд-разработка:

Создан пользовательский интерфейс с использованием Jinja2 для шаблонов и Bootstrap для стилизации.

Разработаны формы загрузки изображений и страницы отображения результатов распознавания. Создана страница авторизации.

Рис. 1 Страница авторизации

Рис. 2 Изображение и результаты обработки

Рис. 3 Пример обработанного изображения крупным планом

Рис. 4 Пример перегруженного объектами изображения, на нём VGG ничего не смогло обнаружить

Бэкенд-разработка:

Реализована серверная логика с использованием фреймворка Django.

Настроены маршруты для обработки загрузок изображений, взаимодействия с моделью машинного обучения и передача результатов на фронтенд.

Интеграция модели машинного обучения:

Подключена и настроена предобученная модель VGG для выполнения распознавания объектов.

Реализована обработка результатов модели (обнаруженные объекты обводятся рамкой) и их отображение на веб-страницах.

Рис. 5 Файловая структура проекта



7. Анализ и интерпретация результатов

Сравнение моделей

Были протестированы различные предобученные модели, включая VGG, на различных наборах данных.

Основные метрики, такие как достоверность, полнота, точность (precision) и время отклика, были использованы для оценки производительности каждой модели.

Интерпретация результатов

Модель VGG показала высокую точность распознавания объектов, но время отклика было выше по сравнению с более легкими моделями.

Другие модели, такие как YOLO и ResNet, также продемонстрировали хорошие результаты, с различиями в скорости и точности.

Рекомендации по выбору модели в зависимости от проекта

Для задач, требующих высокой точности и допускающих большее время отклика, рекомендуется использовать модель VGG.

Для задач, где важна скорость обработки, можно рассмотреть использование моделей YOLO или других легковесных моделей.



8. Заключение

Обзор выполненной работы

Проектирование и разработка веб-приложения для распознавания объектов были успешно завершены в соответствии с изначально созданной документацией. Приложение включает функционал загрузки изображений, обработки с использованием модели VGG и отображения результатов.

Реализованное приложение соответствует требованиям и демонстрирует высокую точность распознавания объектов.

Модель VGG показала хорошие результаты в тестах, однако возможно использование других моделей для улучшения времени отклика.

Дальнейшие планы

Будет полезным создание сводной статистики по всем моделям, со всеми метриками эффективности, чтобы пользователи могли самостоятельно выбирать наиболее подходящую модель на основе полных данных.

Планируется добавление новых функций, таких как сохранение истории загрузок и результатов, улучшение интерфейса и расширение функциональности.
